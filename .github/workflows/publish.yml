name: Publish wheels and conda packages

on:
  push:
    branches:
      - main
    paths-ignore:
      - conda-recipes/deps/**

permissions:
  contents: read

jobs:
  should_skip:
    name: Check should skip
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      version: ${{ steps.get_current_version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get version from pyproject.toml
        id: get_current_version
        run: |
          version=v$(grep '^version' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Get latest version
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Check version changed
        id: check
        run: |
          if [ "$VERSION" != "$LATEST_TAG" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "Version has changed from $LATEST_TAG to $VERSION"
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Will skip the pipeline as version has not changed (still on $LATEST_TAG)"
          fi
        env:
          VERSION: ${{ steps.get_current_version.outputs.version }}
          LATEST_TAG: ${{ steps.get_latest_tag.outputs.latest_tag }}

  build:
    name: ${{ matrix.platform.runner }} ${{ matrix.platform.target }} ${{ matrix.platform.manylinux }}
    runs-on: ${{ matrix.platform.runner }}
    needs:
      - should_skip
    if: ${{ needs.should_skip.outputs.version_changed == 'true' }}
    strategy:
      fail-fast: true
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
            target-platform: linux-64
            before: 'yum install --assumeyes perl-core'
            manylinux: 'auto'
            create-conda-package: true
          - runner: ubuntu-latest
            target: x86_64
            before: 'apt update && apt install -y libssl-dev'
            manylinux: 'musllinux_1_2'
          - runner: ubuntu-latest
            target: x64
            before: 'yum install --assumeyes perl-core'
            manylinux: 'auto'
          - runner: ubuntu-latest
            target: x86
            before: 'apt update && apt install -y libssl-dev'
            manylinux: 'musllinux_1_2'
          - runner: ubuntu-latest
            target: aarch64
            before: 'apt update && apt install -y libssl-dev'
          - runner: ubuntu-latest
            target: aarch64
            before: 'apt update && apt install -y libssl-dev'
            manylinux: 'auto'
          - runner: ubuntu-latest
            target: aarch64
            before: 'apt update && apt install -y libssl-dev'
            manylinux: 'musllinux_1_2'
          - runner: ubuntu-latest
            target: armv7
            before: 'apt update && apt install -y libssl-dev'
            manylinux: 'auto'
          - runner: ubuntu-latest
            target: armv7
            before: 'apt update && apt install -y libssl-dev'
            manylinux: 'musllinux_1_2'
          - runner: windows-latest
            target: x64
            target-platform: win-64
            create-conda-package: true
          - runner: windows-latest
            target: x86
          - runner: macos-latest
            target: x86_64
            target-platform: osx-64
            create-conda-package: true
          - runner: macos-latest
            target: aarch64
            target-platform: osx-arm64
            create-conda-package: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        if: runner.os == 'Windows'
        with:
          python-version: |
            3.9
            3.10
            3.11
            3.12
          architecture: ${{ matrix.platform.target }}
      - uses: actions/setup-python@v5
        if: runner.os != 'Windows'
        with:
          python-version: |
            3.9
            3.10
            3.11
            3.12
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: ${{ matrix.platform.manylinux }}
          before-script-linux: ${{ matrix.platform.before }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.runner }}-${{ matrix.platform.manylinux }}-${{ matrix.platform.target }}
          path: dist
      - name: Build conda package
        if: matrix.platform.create-conda-package
        uses: prefix-dev/rattler-build-action@v0.2.19
        with:
          upload-artifact: true
          artifact-name: conda-${{ matrix.platform.runner }}-${{ matrix.platform.target }}
          recipe-path: 'conda-recipes/recipe.yaml'
          build-args: '--target-platform ${{ matrix.platform.target-platform }} --experimental'

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist


  publish:
    name: Publish to pypi and terraquantumag channel
    runs-on: ubuntu-latest
    needs: [build, sdist, should_skip]
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - uses: actions/checkout@v4
      - name: Install rattler-build
        run: |
          mkdir -p ${{ runner.temp }}/rattler-build
          curl -Ls \
            https://github.com/prefix-dev/rattler-build/releases/latest/download/rattler-build-x86_64-unknown-linux-musl \
            -o ${{ runner.temp }}/rattler-build/rattler-build
          chmod +x ${{ runner.temp }}/rattler-build/rattler-build
          echo ${{ runner.temp }}/rattler-build >> $GITHUB_PATH
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            wheels-*/*
            conda-*/*
      - name: Publish to prefix.dev channel
        run: |
          for pkg in $(find conda-*/* -type f \( -name "*.conda" -o -name "*.tar.bz2" \) ); do
            echo "Uploading ${pkg}"
            rattler-build upload prefix -c terraquantumag "${pkg}" 
          done
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.POETRY_PYPI_TOKEN_PYPI }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
      - name: Build changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          toTag: ${{ github.sha }}
          ignorePreReleases: 'true'
          configurationJson: |
            {
              "template": "## Release ${{ needs.check_version.outputs.version }}\n\n#{{CHANGELOG}}",
              "categories": [
                {
                    "title": "### Changes",
                    "labels": []
                }
              ]
            }

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.build_changelog.outputs.changelog }}
          tag_name: ${{ needs.should_skip.outputs.version }}